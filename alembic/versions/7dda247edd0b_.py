"""empty message

Revision ID: 7dda247edd0b
Revises: 
Create Date: 2024-10-14 08:13:08.783248

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "7dda247edd0b"
down_revision = None
branch_labels = None
depends_on = None


document_type_enum = postgresql.ENUM(
    "APPLICATION", "ORGANIZATION", name="document_type", create_type=False,
)

application_status_enum = postgresql.ENUM(
    "IN_PROGRESS", "APPROVE", "REJECTED", name="application_status", create_type=False,
)

organization_role_enum = postgresql.ENUM("ADMIN", "STAFF", name="organization_role", create_type=False,)

review_type_enum = postgresql.ENUM("EVENT", "VENDOR", name="review_type", create_type=False,)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    document_type_enum.create(op.get_bind(), checkfirst=True)
    application_status_enum.create(op.get_bind(), checkfirst=True)
    organization_role_enum.create(op.get_bind(), checkfirst=True)
    review_type_enum.create(op.get_bind(), checkfirst=True)

    op.create_table(
        "organizations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("organization_name", sa.String(), nullable=False),
        sa.Column("contact_address", sa.String(), nullable=False),
        sa.Column("contact_phone", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), server_default=sa.text("current_timestamp"), nullable=False),
        sa.Column("age", sa.Integer(), nullable=True),
        sa.Column("avatar", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "documents",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uploader_id", sa.Integer(), nullable=False),
        sa.Column("file_url", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "type",
            document_type_enum,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["uploader_id"],
            ["organizations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "events",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("organizer_id", sa.Integer(), nullable=False),
        sa.Column("event_name", sa.String(), nullable=False),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=False),
        sa.Column("phone_contact", sa.String(), nullable=False),
        sa.Column("pictures", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("details", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("start_date", postgresql.TIMESTAMP(timezone=True), server_default=sa.text("current_timestamp"), nullable=False),
        sa.Column("duration", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["organizer_id"],
            ["organizations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "organization_members",
        sa.Column("organization_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "role",
            organization_role_enum,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint(
            "organization_id", "user_id", name="organization_members_pk"
        ),
    )
    op.create_table(
        "organization_rating",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("target_org", sa.Integer(), nullable=False),
        sa.Column("review", sa.TEXT(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            review_type_enum,
            nullable=False,
        ),
        sa.Column("author", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["target_org"],
            ["organizations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "event_applications",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.Integer(), nullable=False),
        sa.Column("applicant_id", sa.Integer(), nullable=False),
        sa.Column(
            "application_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "status",
            application_status_enum,
            nullable=False,
        ),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), server_default=sa.text("current_timestamp"), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), server_default=sa.text("current_timestamp"), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["applicant_id"],
            ["organizations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "application_document",
        sa.Column("application_id", sa.Integer(), nullable=False),
        sa.Column("document_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["event_applications.id"],
        ),
        sa.ForeignKeyConstraint(
            ["document_id"],
            ["documents.id"],
        ),
        sa.PrimaryKeyConstraint(
            "application_id", "document_id", name="application_document_pk"
        ),
    )
    op.create_table(
        "user_google_id",
        sa.Column("google_id", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("google_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("application_document")
    op.drop_table("event_applications")
    op.drop_table("organization_rating")
    op.drop_table("organization_members")
    op.drop_table("events")
    op.drop_table("documents")
    op.drop_table("users")
    op.drop_table("organizations")
    op.drop_table("user_google_id")
    review_type_enum.drop(op.get_bind(), checkfirst=True)
    organization_role_enum.drop(op.get_bind(), checkfirst=True)
    application_status_enum.drop(op.get_bind(), checkfirst=True)
    document_type_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
